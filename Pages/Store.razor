@using StarClicker.Data
@using Microsoft.AspNetCore.Components.Web.Infrastructure
@inject ClickerData _clickerData
@inject IJSRuntime _js
@page "/Store"
@implements IDisposable
@code
{
    public void OnUpdate()
    {
        InvokeAsync(async () =>
        {
            foreach (var hydrogenProducer in PredefinedProducers.Templates)
            {
                await _js.InvokeVoidAsync("updateBuyButton", hydrogenProducer.name, hydrogenProducer.cost, _clickerData.HydrogenCount);
            }
        });
    }
    
    protected override void OnInitialized()
    {
        _clickerData.OnUpdate += OnUpdate;
    }

    public void Dispose()
    {
        if (_clickerData == null) return;
        try
        {
            _clickerData.OnUpdate -= OnUpdate;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}
<div class="container">
    <h3>Store</h3>
    <button @onclick="_clickerData.AddOneHydrogen">Free H, Click here!</button><br />
    <div class="store">
        @foreach (HydrogenProducer producer in PredefinedProducers.Templates)
            {
                <div class="card">
                    <span class="name">@producer.name</span>
                    <span class="count">x@(_clickerData.producers.Find(prod => prod.name == producer.name)?.producerCount ?? 0)</span>
                    <img src="img/QuestionMark.svg" alt="@producer.name">
                    <span class="rate">@producer.productionRate H/s</span>
                    <span class="rate">(@((decimal)producer.productionRate/ClickerData.SyntheticHydrogenLimit)He/s)</span>
                    <span class="cost">@producer.cost</span>
                    <button id="@producer.name" class="producerButton" @onclick="() => { _clickerData.BuyProducer(producer); }">Buy</button><br />
                </div>
            }
    </div>
</div>